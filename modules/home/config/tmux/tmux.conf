set-option -g focus-events on

# TODO: find a way to toggle this?
set-option -g display-time 3000

set -g prefix2 C-Space
bind -N "Send the prefix key through to the application" C-Space send-prefix

# Terminal capabilities and colors
set -g default-terminal "xterm-256color"
set-option -sa terminal-features ',xterm-256color:RGB'
set-option -ga terminal-overrides ',xterm-256color:Tc'

set -g base-index 1          # start indexing windows at 1 instead of 0
set -g detach-on-destroy off # don't exit from tmux when closing a session
set -g escape-time 0         # zero-out escape time delay
set -g history-limit 1000000 # increase history size (from 2,000)
set -g mouse on              # enable mouse support
set -g renumber-windows on   # renumber all windows when any window is closed
set -g set-clipboard on      # use system clipboard
set -g status-interval 3     # update the status bar every 3 seconds

set -g status-left "#[fg=blue,bold]#S "
set -g status-left-length 200    # increase length (from 10)
set -g status-right-length 200   # increase length (from 10)
set -g status-position top       # macOS / darwin style
set -g status-style 'bg=default' # transparent
set -g status off

set -g window-status-current-format '*#[fg=magenta]#W'
set -g window-status-format ' #[fg=gray]#W'

set -g message-command-style bg=default,fg=yellow
set -g message-style bg=default,fg=yellow
set -g mode-style bg=default,fg=yellow
set -g pane-active-border-style 'fg=white,bg=default'
set -g pane-border-style 'fg=brightblack,bg=default'

bind 'C-v' split-window -c '#{pane_current_path}' -h
bind 'v' split-window -c '#{pane_current_path}' -h
bind 'C-h' split-window -c '#{pane_current_path}'
bind "C-'" split-window -c '#{pane_current_path}'
bind 'h' split-window -c '#{pane_current_path}'

bind 'C-z' resize-pane -Z
bind 'C-f' resize-pane -Z

bind '%' split-window -c '#{pane_current_path}' -h
bind '"' split-window -c '#{pane_current_path}'
bind c new-window -c '#{pane_current_path}'

# vi-style controls for copy mode
setw -g mode-keys vi
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi Escape send-keys -X cancel

# jump to last prompt
bind-key -T copy-mode-vi [ send-keys -X previous-prompt
bind-key -T copy-mode-vi ] send-keys -X next-prompt

bind -T copy-mode n send-keys -X next-prompt
bind -T copy-mode p send-keys -X previous-prompt

# global sessions
bind-key "k" run-shell "sesh connect \"$(
  sesh list --icons --hide-duplicates | fzf-tmux -p 100%,100% \
    --no-border \
    --no-info \
    --ansi \
    --list-border \
    --no-sort --prompt '⚡  ' \
    --color 'list-border:6,input-border:3,preview-border:2,header-bg:-1,header-border:6' \
    --header '^a all ^t tmux ^g conf ^x zox ^d kill ^f find' \
    --input-border \
    --header-border \
    --bind 'tab:down,btab:up' \
    --bind 'ctrl-space:abort' \
    --bind 'ctrl-a:change-prompt(⚡  )+reload(sesh list --icons)' \
    --bind 'ctrl-t:change-prompt(🪟  )+reload(sesh list -t --icons)' \
    --bind 'ctrl-g:change-prompt(⚙️  )+reload(sesh list -c --icons)' \
    --bind 'ctrl-x:change-prompt(📁  )+reload(sesh list -z --icons)' \
    --bind 'ctrl-f:change-prompt(🔎  )+reload(fd -H -d 2 -t d -E .Trash . ~)' \
    --bind 'ctrl-d:execute(tmux kill-session -t {2..})+change-prompt(⚡  )+reload(sesh list --icons)' \
    --preview-window 'right:70%' \
    --preview 'sesh preview {}' \
)\""

# root sessions
bind-key "r" run-shell "sesh connect \"\$(
  sesh list --icons | fzf-tmux -p 100%,100% --no-border \
    --query  \"\$(sesh root)\" \
    --ansi \
    --list-border \
    --no-sort --prompt '⚡  ' \
    --color 'list-border:6,input-border:3,preview-border:2,header-bg:-1,header-border:6' \
    --header '^a all ^t tmux ^g conf ^x zox ^d kill ^f find' \
    --input-border \
    --bind 'tab:down,btab:up' \
    --bind 'ctrl-space:abort' \
    --bind 'ctrl-t:change-prompt(🪟  )+reload(sesh list -t --icons)' \
    --bind 'ctrl-g:change-prompt(⚙️  )+reload(sesh list -c --icons)' \
    --bind 'ctrl-x:change-prompt(📁  )+reload(sesh list -z --icons)' \
    --bind 'ctrl-f:change-prompt(🔎  )+reload(fd -H -d 2 -t d -E .Trash . ~)' \
    --bind 'ctrl-d:execute(tmux kill-session -t {2..})+change-prompt(⚡  )+reload(sesh list --icons)' \
    --preview-window 'right:70%' \
    --preview 'sesh preview {}' \
)\""

# Toggle or jump to lazygit
bind-key g run-shell "\
  CURR_WIN_NAME=\"\$(tmux display-message -p '#{window_name}')\"; \
  if [ \"\$CURR_WIN_NAME\" = \"lazygit\" ]; then \
    tmux kill-window; \
  else \
    LAZYGIT_WINS=\"\$(tmux list-windows -F '#{window_index}:#{window_name}' | grep ':lazygit$' | head -n1 | cut -d: -f1)\"; \
    if [ -n \"\$LAZYGIT_WINS\" ]; then \
      tmux select-window -t \$LAZYGIT_WINS; \
    else \
      if command -v lazygit >/dev/null 2>&1; then \
        tmux new-window -c '#{pane_current_path}' -n 'lazygit' 'lazygit'; \
      else \
        tmux display-message 'lazygit not found in PATH'; \
      fi; \
    fi; \
  fi"

# Toggle or jump to gh-dash
bind-key G run-shell "\
  CURR_WIN_NAME=\"\$(tmux display-message -p '#{window_name}')\"; \
  if [ \"\$CURR_WIN_NAME\" = \"gh-dash\" ]; then \
    tmux kill-window; \
  else \
    GH_DASH_WINS=\"\$(tmux list-windows -F '#{window_index}:#{window_name}' | grep ':gh-dash$' | head -n1 | cut -d: -f1)\"; \
    if [ -n \"\$GH_DASH_WINS\" ]; then \
      tmux select-window -t \$GH_DASH_WINS; \
    else \
      if command -v gh-dash >/dev/null 2>&1; then \
        tmux new-window -c '#{pane_current_path}' -n 'gh-dash' 'TERM=xterm-256color exec gh-dash'; \
      else \
        tmux display-message 'gh-dash not found in PATH'; \
      fi; \
    fi; \
  fi"

# Toggle or jump to btop
bind-key b run-shell "\
  CURR_WIN_NAME=\"\$(tmux display-message -p '#{window_name}')\"; \
  if [ \"\$CURR_WIN_NAME\" = \"btop\" ]; then \
    tmux kill-window; \
  else \
    BTOP_WINS=\"\$(tmux list-windows -F '#{window_index}:#{window_name}' | grep ':btop$' | head -n1 | cut -d: -f1)\"; \
    if [ -n \"\$BTOP_WINS\" ]; then \
      tmux select-window -t \$BTOP_WINS; \
    else \
      if command -v btop >/dev/null 2>&1; then \
        tmux new-window -c '#{pane_current_path}' -n 'btop' 'btop'; \
      else \
        tmux display-message 'btop not found in PATH'; \
      fi; \
    fi; \
  fi"

# Toggle or jump to yazi
bind-key e run-shell "\
  CURR_WIN_NAME=\"\$(tmux display-message -p '#{window_name}')\"; \
  if [ \"\$CURR_WIN_NAME\" = \"yazi\" ]; then \
    tmux kill-window; \
  else \
    YAZI_WINS=\"\$(tmux list-windows -F '#{window_index}:#{window_name}' | grep ':yazi$' | head -n1 | cut -d: -f1)\"; \
    if [ -n \"\$YAZI_WINS\" ]; then \
      tmux select-window -t \$YAZI_WINS; \
    else \
      if command -v yazi >/dev/null 2>&1; then \
        tmux new-window -c '#{pane_current_path}' -n 'yazi' 'TERM=xterm-256color yazi'; \
      else \
        tmux display-message 'yazi not found in PATH'; \
      fi; \
    fi; \
  fi"

# Reload tmux configuration with prefix+C-r (Control+r)
bind-key C-r source-file /private/etc/nixos-config/modules/home/config/tmux/tmux.conf \; display-message "tmux.conf reloaded!"

bind-key -N "last-session (via sesh) " L run-shell "sesh last"
bind-key ";" last-window